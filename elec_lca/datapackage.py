from datapackage import Package
from pathlib import Path
from . import __version__

DIR_DATAPACKAGE_TEMP = Path.cwd() / "export" / "temp"
DIR_DATAPACKAGE = Path.cwd() / "export" / "datapackage"


def convert_wurst_to_arrays(database):
    """
    Converts a wurst database (list of dictionaries) into the following:
    * numpy array of technosphere indices
    * numpy array of values for each technosphere exchange
    * numpy array of biosphere indices
    * numpy array of values for each biosphere exchange

    And save them under the temp directory.

    Parameters
    ----------
    database
        A wurst database, as a list of dictionaries.

    Returns
    -------
    None. Saves the arrays under the temp directory.

    """

def create_datapackage(name: str = "test"):
    """
    Create a data package from the temp directory and save it to the datapackage directory.
    Parameters
    ----------
    name: str
        Name of the data package. Default is "test".

    Returns
    -------
    None. Saves the data package to the datapackage directory.

    """

    # check that directory exists, otherwise create it
    Path(DIR_DATAPACKAGE_TEMP).mkdir(parents=True, exist_ok=True)

    package = Package(base_path=str(DIR_DATAPACKAGE_TEMP))
    package.infer("**/*.csv")
    package.descriptor["name"] = name
    package.descriptor["title"] = name.capitalize()
    package.descriptor["description"] = (
        f"Data package generated by elec_lca {__version__}."
    )

    package.descriptor["keywords"] = [
        "ecoinvent",
        "scenario",
        "data package",
    ]
    package.descriptor["licenses"] = [
        {
            "id": "CC0-1.0",
            "title": "CC0 1.0",
            "url": "https://creativecommons.org/publicdomain/zero/1.0/",
        }
    ]
    package.commit()

    # check that directory exists, otherwise create it
    Path(DIR_DATAPACKAGE).mkdir(parents=True, exist_ok=True)

    # save the datapackage
    package.save(DIR_DATAPACKAGE / f"{name}.zip")